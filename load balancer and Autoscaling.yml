AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template LoadBalancerWithAutoscaling:
  Create a load balancer with an associated target group and auto scaling group.'
  
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: 'virginia'

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LoadBalancer
      Subnets:
        - !ImportValue newstack1-PublicSubnetA
        - !ImportValue newstack1-PublicSubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: LoadBalancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP and SSH access'
      VpcId: !ImportValue newstack1-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: loadb-securitygroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TargetGroup
      VpcId: !ImportValue newstack1-VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: LaunchTemplate
      LaunchTemplateData:
        ImageId: 'ami-0005e0cfe09cc9050'
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
        - !Ref SecurityGroupWeb

        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html

        
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue newstack1-PrivateSubnetA
        - !ImportValue newstack1-PrivateSubnetB
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref TargetGroup

  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: '40'

  SecurityGroupWeb:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP and SSH access'
      VpcId: !ImportValue newstack1-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 69.181.48.253/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  EC2InstaceConnect:  
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: True
      SecurityGroupIds: 
      - !Ref LoadBalancerSecurityGroup
      - !Ref SecurityGroupWeb
      SubnetId: !ImportValue newstack1-PrivateSubnetA
      Tags: 
        - Key: Name
          Value: EC2InstaceConnect

          ### MONITORING ###
  CpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU utilization exceeds 40%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '40'
      ComparisonOperator: GreaterThanThreshold

  SNSTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: d.tchonla@gmail.com
          Protocol: email 
      TopicName: App-Topic
      Tags: 
        - Key: Name 
          Value: App-Topic

  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance Launch Successful"
      State: "ENABLED"
      Targets:
        - Arn: !Ref SNSTopic
          Id: "SNSTopic"


Outputs:
  SecurityGroupWeb:
    Description: Security Group Web
    Value: !Ref SecurityGroupWeb
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupWeb'
  LoadBalancerDNS:
    Description: DNS of the Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'
  LoadBalancerSecurityGroup:
    Description: Load Balancer Security Group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerSecurityGroup'
  AutoScalingGroup:
    Description: Auto Scaling Group
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingGroup'
  LaunchTemplate:
    Description: Launch Template
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub '${AWS::StackName}-LaunchTemplate'
  KeyName:
    Description: Key Name
    Value: !Ref KeyName
    Export:
      Name: !Sub '${AWS::StackName}-KeyName'
  SNSTopicArn:
    Value: !Ref MySNSTopic
    Description: "ARN of the created SNS topic"